#!/usr/bin/env python
# coding: utf-8

# In[14]:


import pandas as pd
from sklearn import preprocessing
import numpy as np
from alpha_vantage.timeseries import TimeSeries
import json


def save_dataset(symbol):
    credentials = json.load(open('creds.json', 'r'))
    api_key = 'PD8L7WYODI8X6UU0'

    ts = TimeSeries(key=api_key, output_format='pandas')
    data, meta_data = ts.get_daily(symbol, outputsize='full')

    data.to_csv(f'./{symbol}_daily.csv')


# In[15]:


save_dataset("AAPL")


# In[16]:


history_points = 50

def csv_to_dataset(csv_path):
    data = pd.read_csv(csv_path)
    data = data.drop('date', axis=1)
    data = data.drop(0, axis=0)








# In[17]:


history_points = 50

def csv_to_dataset(csv_path):
    data = pd.read_csv(csv_path)
    data = data.drop('date', axis=1)
    data = data.drop(0, axis=0)


# In[21]:


csv_to_dataset('C:/Users/athis/AAPL_daily.csv')


# In[38]:


data = pd.read_csv('AAPL_daily.csv', index_col=0)


# In[39]:


data


# In[45]:


data.index = pd.to_datetime(data.index)


# In[46]:


df2 = data.reset_index()['4. close']


# In[48]:


#(b) Implement the stochastic gradient descent algorithm to fit a linear regression model for this data set. 
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
df1 = scaler.fit_transform(np.array(data).reshape(-1,1))


# In[49]:


df1.shape


# In[50]:


training_size = int(len(df1)*0.7)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]


# In[51]:


len(train_data),len(test_data)


# In[52]:


import numpy
def create_dataset(dataset,time_step=1):
    dataX, dataY = [],[]
    for i in range(len(dataset)-time_step-1):
        a = dataset[i:(i+time_step), 0]
        dataX.append(a)
        dataY.append(dataset[i+time_step,0])
    return numpy.array(dataX),numpy.array(dataY)


# In[53]:


time_step = 100
X_train, Y_train = create_dataset(train_data , time_step)
X_test, ytest = create_dataset(test_data , time_step)


# In[54]:


print(X_train)


# In[55]:


print(X_train.shape),print(Y_train.shape)


# In[56]:


X_train= X_train.reshape(X_train.shape[0] ,X_train.shape[1],1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)


# In[57]:


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM


# In[58]:


model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1))) 
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50)) 
model.add(Dense(1))
model.compile(optimizer='adam',loss = 'MSE')


# In[59]:


model.summary()


# In[60]:


model.fit(X_train,Y_train, validation_data = (X_test,ytest),epochs=100,batch_size=64,verbose=1)


# In[61]:


train_predict=model.predict(X_train)
test_predict=model.predict(X_test)


# In[62]:


import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(Y_train,train_predict))


# In[64]:


import matplotlib.pyplot as plt

look_back = 100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:,:]= np.nan
trainPredictPlot[look_back:len(train_predict)+look_back,:] = train_predict

testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:,:]= numpy.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1,:] = test_predict
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()


# In[69]:


test_data.shape


# In[70]:


x_input = test_data[8248:].reshape(1,-1)
x_input.shape


# In[71]:


temp_input=list(x_input)
temp_input=temp_input[0].tolist()


# In[72]:


temp_input


# In[73]:


from numpy import array
lst_output=[]
n_steps=100
i=0
while(i<90):

    if(len(temp_input)>100):
        x_input=np.array(temp_input[1:])
        print("{} day input{}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input=x_input.reshape((1,n_steps,1))
        yhat = model.predict(x_input,verbose=0)
        print("{}day output{}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input= temp_input[1:]
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input=x_input.reshape((1,n_steps,1))
        yhat=model.predict(x_input,verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
        
print(lst_output)


# In[74]:


day_new=np.arange(1,101)
day_pred=np.arange(101,191)


# In[78]:


len(df1)


# In[76]:


df3=df1.tolist()
df3.extend(lst_output)


# In[79]:


plt.plot(day_new,scaler.inverse_transform(df1[27725:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))






